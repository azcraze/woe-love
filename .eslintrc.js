module.exports = {
  parserOptions: {
    ecmaVersion: "latest",
    sourceType: "script",
    ecmaFeatures: {},
  },
  extends: ["eslint-config-prettier"],
  rules: {
    "default-param-last": ["error"],
    "default-case-last": ["error"],
    "max-statements": [ "error", { max: 16 }],
    "max-depth": [ "error", { max: 4 }],
    "no-lonely-if": ["error"],
    "prefer-template": ["error"],
    "no-useless-return": ["error"],
    "spaced-comment": [ "error", "always", { block: { exceptions: ["-+"]}}],
    "no-useless-rename": [ "error", { ignoreImport: true }],
    "for-direction": ["error"],
    "key-spacing": [
      2, {
        singleLine: {
          beforeColon: false,
          afterColon: true,
        },
        multiLine: {
          beforeColon: false,
          afterColon: true,
        },
      },
    ],
    "no-multi-spaces": [
      "error", {
        ignoreEOLComments: false,
        exceptions: { Property: true },
      },
    ],
    "vars-on-top": ["warn"],
    "object-curly-newline": [
      "error", {
        multiline: true,
        minProperties: 3,
        consistent: true,
      },
    ],
    "object-curly-spacing": [ "error", "always", { arraysInObjects: false, objectsInObjects: false },],
    yoda: [ "error", "always" ],
    "padded-blocks": [ "error", { switches: "never" }],
    "padding-line-between-statements": [
      "error",
      {
        blankLine: "always",
        prev: [ "const", "let", "var" ],
        next: "*",
      },
      {
        blankLine: "any",
        prev: [ "const", "let", "var" ],
        next: [ "const", "let", "var" ],
      },
      {
        blankLine: "never",
        prev: [ "case", "default" ],
        next: "*",
      },
    ],
    "no-invalid-regexp": [
      "error", {
        allowConstructorFlags: [ "a", "z" ],
      },
    ],
    "getter-return": [ "error", { allowImplicit: true }],
    "valid-typeof": ["error"],
    "no-class-assign": ["error"],
    "no-compare-neg-zero": ["error"],
    "no-cond-assign": ["error"],
    "no-constant-condition": ["error"],
    "no-control-regex": ["error"],
    "no-debugger": ["error"],
    "no-delete-var": ["error"],
    "no-dupe-args": ["error"],
    "no-dupe-class-members": ["error"],
    "no-dupe-else-if": ["error"],
    "no-dupe-keys": ["error"],
    "no-duplicate-case": ["error"],
    "no-empty": ["error"],
    "no-empty-character-class": ["error"],
    "no-empty-pattern": ["error"],
    "no-ex-assign": ["error"],
    "no-extra-boolean-cast": ["error"],
    "no-extra-semi": ["error"],
    "no-fallthrough": ["error"],
    "no-func-assign": ["error"],
    "no-inner-declarations": ["error"],
    "no-irregular-whitespace": ["error"],
    "no-loss-of-precision": ["error"],
    "no-misleading-character-class": ["error"],
    "no-mixed-spaces-and-tabs": ["error"],
    "no-new-symbol": ["error"],
    "no-nonoctal-decimal-escape": ["error"],
    "no-obj-calls": ["error"],
    "no-octal": ["error"],
    "no-prototype-builtins": ["error"],
    "no-redeclare": ["error"],
    "no-regex-spaces": ["error"],
    "no-self-assign": ["error"],
    "no-setter-return": ["error"],
    "no-shadow-restricted-names": ["error"],
    "no-sparse-arrays": ["error"],
    "no-this-before-super": ["error"],
    "no-unexpected-multiline": ["warn"],
    "no-unreachable": ["error"],
    "no-unsafe-finally": ["error"],
    "no-unsafe-negation": ["error"],
    "no-unsafe-optional-chaining": ["error"],
    "no-unused-labels": ["error"],
    "no-unused-vars": ["warn"],
    "no-useless-backreference": ["error"],
    "no-useless-catch": ["error"],
    "no-useless-escape": ["error"],
    "no-with": ["error"],
    "require-yield": ["error"],
    "use-isnan": ["error"],
    "array-bracket-spacing": [
      "error", "always", {
        arraysInArrays: false,
        objectsInArrays: false,
        singleValue: false,
      },
    ],
    "array-bracket-newline": [
      "error", {
        multiline: true,
        minItems: 4,
      },
    ],
    "array-element-newline": [
      "error", {
        minItems: 4,
      },
    ],
    "block-spacing": [ "warn", "always" ],
    indent: [
      "error", 2, {
        SwitchCase: 1,
        VariableDeclarator: 1,
        MemberExpression: 1,
        CallExpression: {
          arguments: "first",
        },
        ObjectExpression: 1,
        ImportDeclaration: 1,
        flatTernaryExpressions: false,
        offsetTernaryExpressions: true,
        ignoreComments: false,
      },
    ],
  },
  env: {
    commonjs: true,
    node: true,
  },
  ignorePatterns: [ "data/", "node_modules", "*.json" ],
};
